//
// File: stack.hpp
//
// Programmer:
// Date:       Fall 2023
//
//
// Do not change the names of the classes or methods.  Otherwise, instructor
//  tests will not work.
//
#ifndef CS2_STACK_HPP_
#define CS2_STACK_HPP_

#include <new>
#include <cassert>
#include "../string/string.hpp"

template<typename T> 
class Node {
	public:
	Node() : next(0) {};
	Node(const &item) data(item), next(0) {};
	T data;
	node<T> *next;
};


// CLASS INV:
//
template <typename T>
class stack {
public:
              stack     () : tos(-1) {};
              stack     (const stack<T>&);
              ~stack    ();
    void      swap      (stack<T>&);
    stack<T>& operator= (stack<T>);
    
	bool      empty     () const;
	bool      full      () const;
	T         top       () const;
	T         pop       ();
	void      push      (const T&);

private:
	Node<T>   *tos;
};

template <typename T>
stack<T>::stack(const stack<T>& actual) {
	node<T> *temp = actual.tos;
	node<T> *bottom = 0;
	tos = 0;
	while (temp != 0) {
		if (tos == 0) {
			tos = new node<T>(temp->data);
			bottom = tos;
		}
		else {
			bottom->next = new node<T>(temp->data);
			bottom = bottom->next;
		}
		temp = temp->next;
	}
}

template <typename T>
stack<T>::~stack() {
	node<T> temp;
	while (tos != 0) {
		temp = tos;
		tos = tos->next;
		delete temp;
	}
}

template <typename T>
void stack<T>::swap(stack<T> &rhs) {
	node<T> *temp = tos;
	tos = rhs.tos;
	rhs.tos = temp;
}

template <typename T>
stack<T>& stack<T>::operator= (stack<T> rhs) {
	swap(rhs);
	return *this;
}

template <typename T>
bool stack<T>::empty() const {
	if (tos == 0) {
		return true;
	}
	else {
		return false;
	}
}

template <typename T>
bool stack<T>::full() const {
	node<T> *temp = new(std::nothrow) node <T>;
	if (!temp) return true;
}

template <typename T>
T stack<T>::top() const {
	return tos->data;
}

template <typename T>
T stack<T>::pop() {
	T result = tos;
	node<T> *temp = tos;
	tos = tos->next;
	delete temp;
	return result;
}

template <typename T>
void stack<T>::push(const T& item) {
	node<T> pushed_item = new node<T>(item);
	pushed_item->next = tos;
	tos = pushed_item;
}

#endif
