//Implementation file for Project 2

#include "string.hpp"
#include <cassert>

//default ctor, creates empty string
String::String() {
    str[0] = 0;
}

//ctor that assigns a single char to the string array
String::String(char ch) {
    str[0] = ch;
    str[1] = 0;                                                       //ensures NULL terminator
}

//ctor that assigns the multiple characters in invocation to string array
String::String(const char charArray[]) {
    int i = 0;
    while (charArray[i] != 0) {                                     //runs until it encounters NULL
        if (i>= STRING_SIZE -1) break;                              //checks that i will not surpass STRING_SIZE
        str[i] = charArray[i];
        ++i;
    }
    str[i] = 0;
}

//returns the max hcars that can be stored
int String::capacity() const {
    return STRING_SIZE - 1;
}

//returns the legnth of the string
int String::length() const {
    int length = 0;
    while (str[length] != 0) {
        ++length;
    }
    return length;
}

//returns the character at the specified array index
//Must have a const version if we want to also pass a const object
char String::operator[](int arrayPos) const {
    assert((arrayPos >=0) && arrayPos < length());                  //requires 0 <= arrayPos < length()
    return str[arrayPos];
}

//non-const version
char& String::operator[](int arrayPos) {
    assert((arrayPos >=0) && arrayPos < length());                  //requires 0 <= arrayPos < length()
    return str[arrayPos];
}

//overloading += to be able to concatenate two strings
String& String::operator+=(const String& rhs) {
    int length = length();                                          //finds length of lhs
    int i = 0;
    while (rhs[i] != 0) {                                           //loops until it runs into rhs NULL
        str[length + i] = rhs[i];                                   //assigns values of rhs into lhs, starting at the end of the original lhs
        ++i;
    }
    str[length + i] = 0;                                            //ensures NULL terminator at end
    return *this;                                                   //returns value of the object that was called upon
}

String operator+(String lhs, const String& rhs) {
    lhs += rhs;
    return lhs;
}

bool String::operator==(const String& rhs) const {
    int i = 0;
    while (str[i] != 0) {
        if (str[i] == rhs[i]) {
            return true;
        }
        else 
            return false;
        ++i;
    }
}

bool String::operator<(const String& rhs) const {
    int i = 0;
    while (str[i] != 0 && rhs[i] != 0) {
        if (str[i] < rhs[i]) {
            return true;
        }
        else {
            return false;
        }
        ++i;
    }
}

String String::substr(int start, int end) const{
    String subString;
    int i = 0;
    for (int i = start; i <= end; ++i) {
        subString.str[i - start] = str[i];
    }
    subString.str[start - i] = 0;
    return subString;
}
