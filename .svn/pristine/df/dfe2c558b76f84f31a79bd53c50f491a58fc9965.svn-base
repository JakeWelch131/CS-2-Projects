#include "utilities.hpp"
#include <vector>
String infix_to_postfix(const String& input) {
    int i = 0;
    stack<String> S;
    String lhs, rhs, op;
    std::vector<String> vec = input.split(' ');
    //size_t i = 0;


    while(vec[i] != ';') {
        
        if (vec[i] == ')') {
            rhs = S.pop();
            op = S.pop();
            lhs = S.pop();
            S.push(lhs + " " + rhs + " "+ op);
        }
        else if (vec[i] != '(') {
           
            S.push(vec[i]);
        }  
        ++i;
    }
    return S.pop();
}

void postfix_to_assembly(std::ifstream& in, std::ostream& out) {
    String input;
    char ch;
    int i = 0;
    stack<String> S;
    String lhs, rhs, op, temp;
    int tempValue = 1;

    while (!in.eof()) {
        in.get(ch);
        if (ch != '\n') input += ch;
        if (ch == '\n') {
            std::vector<String> vec = input.split(' ');

            while(vec[i] != '\n') {

                if (vec[i] != '*' && vec[i] != '+' && vec[i] != '-' && vec[i] != '/') {
                    S.push(vec[i]);
                }
                else {
                    rhs = S.pop();
                    lhs = S.pop();

                    out << "LD" << " " << lhs << std::endl;

                    out << op_to_assembly(vec[i]) << " " << rhs;

                    temp = "TMP" + int_to_String(tempValue++);

                    S.push(temp);

                    out << "ST" << " " << temp << std::endl;
                }
                ++i;
            }
            input = "";
        }
    }
    
    
}

void evaluate(const String& lhs, const String& op, const String& rhs) {
    int tempN = 1;

    std::cout << "LD" << " " <<lhs << std::endl;

    std::cout << op_to_assembly(op) << " " << rhs;

    std::cout << "ST" << " " << "TMP" << tempN << std::endl;
}

String op_to_assembly(const String& op) {
    switch(op[0]) {
        case '*':
            return "MU";
            break;
        case '+':
            return "AD";
            break;
        case '-':
            return "SB";
            break;
        case '/':
            return "DV";
            break;
        default:
            return "Invalid operator";
            break;
    }
}

String int_to_String(const int& input) {
    String result;
    int number = input;
    while (input > 0) {
        result += (number % 10) + '0';
        number = number / 10;
    }
    return result;
}